name: Update Magazines Data

on:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  update-magazines:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history so we can commit properly
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib
        
    - name: Set up Google credentials
      run: |
        # Create temporary files that will be used by the script
        echo "${{ secrets.GOOGLE_CREDENTIALS }}" > credentials.json
        echo "${{ secrets.GOOGLE_TOKEN }}" > token.json
        
    - name: Run magazine fetch script
      run: |
        echo "Fetching magazine data from Google Drive..."
        python scripts/fetch_magazines.py
        
    - name: Check if token was refreshed
      id: check_token
      run: |
        if [ -f token.json ]; then
          NEW_TOKEN=$(cat token.json)
          OLD_TOKEN='${{ secrets.GOOGLE_TOKEN }}'
          
          if [ "$NEW_TOKEN" != "$OLD_TOKEN" ]; then
            echo "TOKEN_REFRESHED=true" >> $GITHUB_ENV
            echo "Token was refreshed, will update secret"
          else
            echo "TOKEN_REFRESHED=false" >> $GITHUB_ENV
            echo "Token has not changed"
          fi
        else
          echo "TOKEN_REFRESHED=false" >> $GITHUB_ENV
          echo "Token file not found"
        fi
    
    - name: Create Git LFS directory for PDFs if needed
      run: |
        if [ ! -f .gitattributes ]; then
          echo "*.pdf filter=lfs diff=lfs merge=lfs -text" > .gitattributes
          git add .gitattributes
        fi
        
        # Ensure the PDFs directory exists
        mkdir -p data/magazines/pdfs
      
    - name: Commit and push changes
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        
        # Stage all changes
        git add data/magazines/
        git add data/magazines/pdfs/
        git add .gitattributes
        
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update magazine data"
          git push
        fi
        
    - name: Clean up credentials
      run: |
        # Remove sensitive files after committing
        rm -f credentials.json token.json
        
    # This step requires a PAT with repo scope to be set up as REPO_TOKEN secret
    - name: Update token in GitHub secrets if refreshed
      if: env.TOKEN_REFRESHED == 'true'
      uses: gliech/create-github-secret-action@v1.4.0
      with:
        name: GOOGLE_TOKEN
        value: ${{ env.NEW_TOKEN }}
        pa_token: ${{ secrets.REPO_TOKEN }}